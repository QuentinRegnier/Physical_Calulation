# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'projectphysic4.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from math import *

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(500, 800)
        MainWindow.setMinimumSize(QtCore.QSize(500, 800))
        MainWindow.setMaximumSize(QtCore.QSize(500, 800))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("IMG/gravity.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 10, 411, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(255, 0, 0);\n"
"font: 16pt \"Eras Bold ITC\";\n"
"text-decoration: underline;\n"
"")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(130, 40, 241, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(True)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: rgb(255, 0, 0);\n"
"background-color: rgba(255, 255, 255, 0);\n"
"font: 14pt \"Eras Bold ITC\";\n"
"text-decoration: underline;\n"
"")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(30, 160, 201, 16))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("font-size: 9pt;\n"
"color:black;")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(30, 190, 241, 16))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("font-size:9pt;\n"
"color: black;")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(70, 230, 151, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(190, 400, 111, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("color: rgb(87, 234, 54);\n"
"\n"
"font-size: 20pt;")
        self.label_6.setObjectName("label_6")
        self.calcul = QtWidgets.QPushButton(self.centralwidget)
        self.calcul.setGeometry(QtCore.QRect(20, 310, 161, 61))
        self.calcul.setStyleSheet("font-size: 20pt;\n"
"border-radius : 30px;\n"
"background-color : blue;\n"
"color: white;\n"
"font-weight : bold;\n"
"")
        self.calcul.setObjectName("calcul")
        self.distance_entre_la_terre_et_le_vaisseau_en_km = QtWidgets.QLineEdit(self.centralwidget)
        self.distance_entre_la_terre_et_le_vaisseau_en_km.setGeometry(QtCore.QRect(330, 160, 151, 22))
        self.distance_entre_la_terre_et_le_vaisseau_en_km.setObjectName("distance_entre_la_terre_et_le_vaisseau_en_km")
        self.distance_entre_la_lune_et_le_vaisseau_en_km = QtWidgets.QLineEdit(self.centralwidget)
        self.distance_entre_la_lune_et_le_vaisseau_en_km.setGeometry(QtCore.QRect(330, 190, 151, 22))
        self.distance_entre_la_lune_et_le_vaisseau_en_km.setObjectName("distance_entre_la_lune_et_le_vaisseau_en_km")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(230, 160, 21, 16))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("font-size: 9pt;\n"
"color: black;")
        self.label_7.setObjectName("label_7")
        self.result = QtWidgets.QTextEdit(self.centralwidget)
        self.result.setGeometry(QtCore.QRect(40, 490, 291, 61))
        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(True)
        self.result.setFont(font)
        self.result.setReadOnly(True)
        self.result.setObjectName("result")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(350, 500, 101, 41))
        self.label_8.setStyleSheet("font-size: 20px;\n"
"color: black;\n"
"font-weight: bold;")
        self.label_8.setObjectName("label_8")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(240, 330, 221, 21))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.km_int_terre = QtWidgets.QTextEdit(self.centralwidget)
        self.km_int_terre.setGeometry(QtCore.QRect(40, 590, 291, 61))
        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(True)
        self.km_int_terre.setFont(font)
        self.km_int_terre.setReadOnly(True)
        self.km_int_terre.setObjectName("km_int_terre")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(350, 590, 41, 41))
        self.label_9.setStyleSheet("font-size: 20px;\n"
"color: black;\n"
"font-weight: bold;")
        self.label_9.setObjectName("label_9")
        self.km_int_lune = QtWidgets.QTextEdit(self.centralwidget)
        self.km_int_lune.setGeometry(QtCore.QRect(40, 690, 291, 61))
        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(True)
        self.km_int_lune.setFont(font)
        self.km_int_lune.setReadOnly(True)
        self.km_int_lune.setObjectName("km_int_lune")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(350, 700, 51, 41))
        self.label_10.setStyleSheet("font-size: 20px;\n"
"color: black;\n"
"font-weight: bold;")
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(40, 460, 351, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(40, 560, 351, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(40, 660, 351, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(330, 220, 151, 31))
        self.textEdit.setObjectName("textEdit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 500, 22))
        self.menubar.setObjectName("menubar")
        self.menuEditeur = QtWidgets.QMenu(self.menubar)
        self.menuEditeur.setObjectName("menuEditeur")
        self.menuUpdate = QtWidgets.QMenu(self.menubar)
        self.menuUpdate.setObjectName("menuUpdate")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionQuentin_R_gnier = QtWidgets.QAction(MainWindow)
        self.actionQuentin_R_gnier.setCheckable(False)
        self.actionQuentin_R_gnier.setObjectName("actionQuentin_R_gnier")
        self.actionGithub = QtWidgets.QAction(MainWindow)
        self.actionGithub.setObjectName("actionGithub")
        self.actionCr_er_en_2020 = QtWidgets.QAction(MainWindow)
        self.actionCr_er_en_2020.setObjectName("actionCr_er_en_2020")
        self.actionGraphique = QtWidgets.QAction(MainWindow)
        self.actionGraphique.setObjectName("actionGraphique")
        self.actionScratch = QtWidgets.QAction(MainWindow)
        self.actionScratch.setObjectName("actionScratch")
        self.actionCode_Source = QtWidgets.QAction(MainWindow)
        self.actionCode_Source.setObjectName("actionCode_Source")
        self.actionv_1_1_0 = QtWidgets.QAction(MainWindow)
        self.actionv_1_1_0.setObjectName("actionv_1_1_0")
        self.actioncomming_soon = QtWidgets.QAction(MainWindow)
        self.actioncomming_soon.setObjectName("actioncomming_soon")
        self.menuEditeur.addAction(self.actionQuentin_R_gnier)
        self.menuEditeur.addSeparator()
        self.menuEditeur.addAction(self.actionCr_er_en_2020)
        self.menuUpdate.addAction(self.actionv_1_1_0)
        self.menuUpdate.addSeparator()
        self.menuUpdate.addAction(self.actioncomming_soon)
        self.menubar.addAction(self.menuEditeur.menuAction())
        self.menubar.addAction(self.menuUpdate.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Physical Calculation"))
        self.label.setText(_translate("MainWindow", "Caluler l\'équilibre statique d\'un objet "))
        self.label_2.setText(_translate("MainWindow", "entre la Terre et la Lune"))
        self.label_3.setText(_translate("MainWindow", "Distance entre la Terre et l\'objet en Km"))
        self.label_4.setText(_translate("MainWindow", "Distance entre la Lune et l\'objet en Km"))
        self.label_5.setText(_translate("MainWindow", "Objet"))
        self.label_6.setText(_translate("MainWindow", "Resultat"))
        self.calcul.setText(_translate("MainWindow", "Calculer"))
        self.label_7.setText(_translate("MainWindow", "Km"))
        self.label_8.setText(_translate("MainWindow", "Newton"))
        self.label_9.setText(_translate("MainWindow", "Km"))
        self.label_10.setText(_translate("MainWindow", "Km"))
        self.label_11.setText(_translate("MainWindow", "Force gravitationnel en Newton de l\'objet"))
        self.label_12.setText(_translate("MainWindow", "Distance entre la Terre et l\'Objet"))
        self.label_13.setText(_translate("MainWindow", "Distance entre la Lune et l\'Objet"))
        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Segoe UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Apollo 11</p></body></html>"))
        self.menuEditeur.setTitle(_translate("MainWindow", "Editeur"))
        self.menuUpdate.setTitle(_translate("MainWindow", "Update"))
        self.actionQuentin_R_gnier.setText(_translate("MainWindow", "Quentin Régnier"))
        self.actionGithub.setText(_translate("MainWindow", "Github"))
        self.actionCr_er_en_2020.setText(_translate("MainWindow", "Créer en 2020"))
        self.actionGraphique.setText(_translate("MainWindow", "Graphique"))
        self.actionScratch.setText(_translate("MainWindow", "Scratch"))
        self.actionCode_Source.setText(_translate("MainWindow", "Code Source"))
        self.actionv_1_1_0.setText(_translate("MainWindow", "v 1.1.0"))
        self.actioncomming_soon.setText(_translate("MainWindow", "coming soon"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    def calcul():
        # donné du projet
        g = 0.0000000000667
        masse_de_la_terre_en_kg = 5970000000000000000000000
        masse_de_la_lune_en_kg = 73500000000000000000000
        rayon_de_la_terre_en_m = 6371000
        rayon_de_la_lune_en_m = 1737000
        masse_totale_du_vaisseau_en_kg = 45464
        print(masse_totale_du_vaisseau_en_kg)
        distance_entre_la_terre_et_le_vaisseau_en_km = float(ui.distance_entre_la_terre_et_le_vaisseau_en_km.text())
        distance_entre_la_lune_et_le_vaisseau_en_km = float(ui.distance_entre_la_lune_et_le_vaisseau_en_km.text())

        # calcul de préparation pour la distance entre terre ou lune et le vaisseau :

        # transformation de la 'distance entre la terre et vaisseau en km' en 'distance entre la terre et le vaisseau en m' en la multipliant par 1000
        distance_entre_la_terre_et_le_vaisseau_en_m = distance_entre_la_terre_et_le_vaisseau_en_km * 1000
        # transformation de la 'distance entre la lune et le vaisseau en km' en 'distance_entre_la_lune_et_le_vaisseau_en_m' en la multipliant par 1000
        distance_entre_la_lune_et_le_vaisseau_en_m = distance_entre_la_lune_et_le_vaisseau_en_km * 1000
        # ajouts du 'rayon de la terre en m' à la 'distance entre la terre et le vaisseau en m'
        distance_entre_la_terre_et_le_vaisseau_en_m = distance_entre_la_terre_et_le_vaisseau_en_m + rayon_de_la_terre_en_m
        # ajouts du 'rayon de la lune en m' à la' distance entre la terre et le vaisseau en m'
        distance_entre_la_lune_et_le_vaisseau_en_m = distance_entre_la_lune_et_le_vaisseau_en_m + rayon_de_la_lune_en_m
        # mettre la 'distance en la terre et le vaisseau en m' au carré en multipliant celui-çi par lui même
        distance_entre_la_terre_et_le_vaisseau_en_m_au_carre = distance_entre_la_terre_et_le_vaisseau_en_m * distance_entre_la_terre_et_le_vaisseau_en_m
        # mettre la 'distance en la lune et le vaisseau en m' au carré en multipliant celui-çi par lui même
        distance_entre_la_lune_et_le_vaisseau_en_m_au_carre = distance_entre_la_lune_et_le_vaisseau_en_m * distance_entre_la_lune_et_le_vaisseau_en_m
        ui.progressBar.setValue(10)
        # premier calcul de la force de gravitation terre/vaisseau et lune/vaisseau en Neton :

        # mettre la 'force de gravitation F terre en newton' égal à la 'masse de la terre en kg' fois la 'masse totale du vaisseau en kg' diviser par la 'distance entre la terre et le vaisseau en m au carre'
        force_de_gravitation_F_terre_vaisseau_en_newton = masse_de_la_terre_en_kg * masse_totale_du_vaisseau_en_kg / distance_entre_la_terre_et_le_vaisseau_en_m_au_carre
        # multiplier la 'force de gravitation F terre en newton' par 'g'
        force_de_gravitation_F_terre_vaisseau_en_newton *= g

        # mettre la 'force de gravitation F lune en newton' égal à la 'masse de la lune en kg' fois la 'masse totale du vaisseau en kg' diviser par la 'distance entre la lune et le vaisseau en m au carre'
        force_de_gravitation_F_lune_vaisseau_en_newton = masse_de_la_lune_en_kg * masse_totale_du_vaisseau_en_kg / distance_entre_la_lune_et_le_vaisseau_en_m_au_carre
        # multiplier la 'force de gravitation F terre en newton' par 'g'
        force_de_gravitation_F_lune_vaisseau_en_newton *= g

        # calcul d'une valeur approcher :

        # arrondir la 'force de gravitation F terre vaisseau en newton' pour donner 'f terre vaisseau arrondit'
        f_terre_vaisseau_arrondit = floor(force_de_gravitation_F_terre_vaisseau_en_newton)
        # arrondir la 'force de gravitation F lune vaisseau en newton' pour donner 'f lune vaisseau arrondit'
        f_lune_vaisseau_arrondit = floor(force_de_gravitation_F_lune_vaisseau_en_newton)

        # visualisation des résultat final dans la console :

        # print pour visualiser
        print(force_de_gravitation_F_terre_vaisseau_en_newton)
        print(force_de_gravitation_F_lune_vaisseau_en_newton)
        ui.progressBar.setValue(30)
        # calcul brut : Recherche de l'équilibre statique

        # boucle répétant la condition si 'force de gravitation f terre vaisseau en newton' est différent de 'force de gravitation f lun vaisseau en newton'

        while force_de_gravitation_F_terre_vaisseau_en_newton != force_de_gravitation_F_lune_vaisseau_en_newton:
            # condition si 'f terre vaisseau arrondit' est différent de 'f lune vaisseau arrondit' alors (pour trier et trouver l'égalité plus rapidement)
            if f_terre_vaisseau_arrondit != f_lune_vaisseau_arrondit:
                # condition si 'f terre vaisseau arrondit' est supérieure à 'f lune vaisseau arrondit' alors
                ui.progressBar.setValue(40)
                if f_terre_vaisseau_arrondit > f_lune_vaisseau_arrondit:
                    # ajout de 1000m à 'distance_entre_la_terre_et_le_vaisseau_en_m'
                    distance_entre_la_terre_et_le_vaisseau_en_m += 1000
                    # soutrait de 1000m à 'distance_entre_la_lune_et_le_vaisseau_en_m'
                    distance_entre_la_lune_et_le_vaisseau_en_m -= 1000
                    # remmettre les valeur des distance au carré
                    distance_entre_la_terre_et_le_vaisseau_en_m_au_carre = distance_entre_la_terre_et_le_vaisseau_en_m * distance_entre_la_terre_et_le_vaisseau_en_m
                    distance_entre_la_lune_et_le_vaisseau_en_m_au_carre = distance_entre_la_lune_et_le_vaisseau_en_m * distance_entre_la_lune_et_le_vaisseau_en_m
                    # mettre la 'force de gravitation F terre en newton' égal à la 'masse de la terre en kg' fois la 'masse totale du vaisseau en kg' diviser par la 'distance entre la terre et le vaisseau en m au carre'
                    force_de_gravitation_F_terre_vaisseau_en_newton = masse_de_la_terre_en_kg * masse_totale_du_vaisseau_en_kg / distance_entre_la_terre_et_le_vaisseau_en_m_au_carre
                    # multiplier la 'force de gravitation F terre en newton' par 'g'
                    force_de_gravitation_F_terre_vaisseau_en_newton *= g
                    # mettre la 'force de gravitation F lune en newton' égal à la 'masse de la lune en kg' fois la 'masse totale du vaisseau en kg' diviser par la 'distance entre la lune et le vaisseau en m au carre'
                    force_de_gravitation_F_lune_vaisseau_en_newton = masse_de_la_lune_en_kg * masse_totale_du_vaisseau_en_kg / distance_entre_la_lune_et_le_vaisseau_en_m_au_carre
                    # multiplier la 'force de gravitation F terre en newton' par 'g'
                    force_de_gravitation_F_lune_vaisseau_en_newton *= g

                    # calcul d'une valeur approcher :

                    # arrondir la 'force de gravitation F terre vaisseau en newton' pour donner 'f terre vaisseau arrondit'
                    f_terre_vaisseau_arrondit = floor(force_de_gravitation_F_terre_vaisseau_en_newton)
                    # arrondir la 'force de gravitation F lune vaisseau en newton' pour donner 'f lune vaisseau arrondit'
                    f_lune_vaisseau_arrondit = floor(force_de_gravitation_F_lune_vaisseau_en_newton)

                    # visualisation des résultat final dans la console :

                    # print pour visualiser
                    print(force_de_gravitation_F_terre_vaisseau_en_newton)
                    print(force_de_gravitation_F_lune_vaisseau_en_newton)
                else:
                    # ajout de 1000m à 'distance_entre_la_lune_et_le_vaisseau_en_m'
                    distance_entre_la_lune_et_le_vaisseau_en_m += 1000
                    # soutrait de 1000m à 'distance_entre_la_terre_et_le_vaisseau_en_m'
                    distance_entre_la_terre_et_le_vaisseau_en_m -= 1000
                    # remmettre les valeur des distance au carré
                    distance_entre_la_terre_et_le_vaisseau_en_m_au_carre = distance_entre_la_terre_et_le_vaisseau_en_m * distance_entre_la_terre_et_le_vaisseau_en_m
                    distance_entre_la_lune_et_le_vaisseau_en_m_au_carre = distance_entre_la_lune_et_le_vaisseau_en_m * distance_entre_la_lune_et_le_vaisseau_en_m
                    # mettre la 'force de gravitation F terre en newton' égal à la 'masse de la terre en kg' fois la 'masse totale du vaisseau en kg' diviser par la 'distance entre la terre et le vaisseau en m au carre'
                    force_de_gravitation_F_terre_vaisseau_en_newton = masse_de_la_terre_en_kg * masse_totale_du_vaisseau_en_kg / distance_entre_la_terre_et_le_vaisseau_en_m_au_carre
                    # multiplier la 'force de gravitation F terre en newton' par 'g'
                    force_de_gravitation_F_terre_vaisseau_en_newton *= g
                    # mettre la 'force de gravitation F lune en newton' égal à la 'masse de la lune en kg' fois la 'masse totale du vaisseau en kg' diviser par la 'distance entre la lune et le vaisseau en m au carre'
                    force_de_gravitation_F_lune_vaisseau_en_newton = masse_de_la_lune_en_kg * masse_totale_du_vaisseau_en_kg / distance_entre_la_lune_et_le_vaisseau_en_m_au_carre
                    # multiplier la 'force de gravitation F terre en newton' par 'g'
                    force_de_gravitation_F_lune_vaisseau_en_newton *= g

                    # calcul d'une valeur approcher :

                    # arrondir la 'force de gravitation F terre vaisseau en newton' pour donner 'f terre vaisseau arrondit'
                    f_terre_vaisseau_arrondit = floor(force_de_gravitation_F_terre_vaisseau_en_newton)
                    # arrondir la 'force de gravitation F lune vaisseau en newton' pour donner 'f lune vaisseau arrondit'
                    f_lune_vaisseau_arrondit = floor(force_de_gravitation_F_lune_vaisseau_en_newton)

                    # visualisation des résultat final dans la console :

                    # print pour visualiser
                    print(force_de_gravitation_F_terre_vaisseau_en_newton)
                    print(force_de_gravitation_F_lune_vaisseau_en_newton)

                print(f_terre_vaisseau_arrondit)
                print(f_lune_vaisseau_arrondit)

            else:
                ui.progressBar.setValue(60)
                # mis en place d'une seconde valeur aproché mais celle-çi sera au 5eme de dixième près pour éviter uen boucle sans fun
                f_terre_vaisseau_arrondit_two = force_de_gravitation_F_terre_vaisseau_en_newton * 100000
                f_lune_vaisseau_arrondit_two = force_de_gravitation_F_lune_vaisseau_en_newton * 100000
                print(f_terre_vaisseau_arrondit_two)
                print(f_lune_vaisseau_arrondit_two)
                # arrondir la 'force de gravitation F terre vaisseau en newton' pour donner 'f terre vaisseau arrondit'
                f_terre_vaisseau_arrondit_two = round(f_terre_vaisseau_arrondit_two)
                # arrondir la 'force de gravitation F lune vaisseau en newton' pour donner 'f lune vaisseau arrondit'
                f_lune_vaisseau_arrondit_two = round(f_lune_vaisseau_arrondit_two)
                print(f_terre_vaisseau_arrondit_two)
                print(f_lune_vaisseau_arrondit_two)
                f_terre_vaisseau_arrondit_two /= 100000
                f_lune_vaisseau_arrondit_two /= 100000
                print(f_terre_vaisseau_arrondit_two)
                print(f_lune_vaisseau_arrondit_two)
                if f_terre_vaisseau_arrondit_two == f_lune_vaisseau_arrondit_two:
                    print("L'équilibre statique du vaisseau entre la Terre et la Lune est de " + str(
                        force_de_gravitation_F_lune_vaisseau_en_newton), "Newton au centième de milième près")
                    force_de_gravitation_F_lune_vaisseau_en_newton *= 10000
                    f_result = floor(force_de_gravitation_F_lune_vaisseau_en_newton)
                    f_result /= 10000
                    ui.result.setText(str(f_result))
                    distance_entre_la_terre_et_le_vaisseau_en_km = distance_entre_la_terre_et_le_vaisseau_en_m / 1000
                    distance_entre_la_lune_et_le_vaisseau_en_km = distance_entre_la_lune_et_le_vaisseau_en_m / 1000
                    ui.km_int_lune.setText(str(distance_entre_la_lune_et_le_vaisseau_en_km))
                    ui.km_int_terre.setText(str(distance_entre_la_terre_et_le_vaisseau_en_km))
                    ui.progressBar.setValue(100)
                    break

                else:
                    if f_terre_vaisseau_arrondit_two > f_lune_vaisseau_arrondit_two:
                        # ajout de 1000m à 'distance_entre_la_terre_et_le_vaisseau_en_m'
                        distance_entre_la_terre_et_le_vaisseau_en_m += 1
                        # soutrait de 1000m à 'distance_entre_la_lune_et_le_vaisseau_en_m'
                        distance_entre_la_lune_et_le_vaisseau_en_m -= 1
                        # remmettre les valeur des distance au carré
                        distance_entre_la_terre_et_le_vaisseau_en_m_au_carre = distance_entre_la_terre_et_le_vaisseau_en_m * distance_entre_la_terre_et_le_vaisseau_en_m
                        distance_entre_la_lune_et_le_vaisseau_en_m_au_carre = distance_entre_la_lune_et_le_vaisseau_en_m * distance_entre_la_lune_et_le_vaisseau_en_m
                        # mettre la 'force de gravitation F terre en newton' égal à la 'masse de la terre en kg' fois la 'masse totale du vaisseau en kg' diviser par la 'distance entre la terre et le vaisseau en m au carre'
                        force_de_gravitation_F_terre_vaisseau_en_newton = masse_de_la_terre_en_kg * masse_totale_du_vaisseau_en_kg / distance_entre_la_terre_et_le_vaisseau_en_m_au_carre
                        # multiplier la 'force de gravitation F terre en newton' par 'g'
                        force_de_gravitation_F_terre_vaisseau_en_newton *= g

                        # mettre la 'force de gravitation F lune en newton' égal à la 'masse de la lune en kg' fois la 'masse totale du vaisseau en kg' diviser par la 'distance entre la lune et le vaisseau en m au carre'
                        force_de_gravitation_F_lune_vaisseau_en_newton = masse_de_la_lune_en_kg * masse_totale_du_vaisseau_en_kg / distance_entre_la_lune_et_le_vaisseau_en_m_au_carre
                        # multiplier la 'force de gravitation F terre en newton' par 'g'
                        force_de_gravitation_F_lune_vaisseau_en_newton *= g

                        # calcul d'une valeur approcher :

                        # arrondir la 'force de gravitation F terre vaisseau en newton' pour donner 'f terre vaisseau arrondit'
                        f_terre_vaisseau_arrondit = floor(force_de_gravitation_F_terre_vaisseau_en_newton)
                        # arrondir la 'force de gravitation F lune vaisseau en newton' pour donner 'f lune vaisseau arrondit'
                        f_lune_vaisseau_arrondit = floor(force_de_gravitation_F_lune_vaisseau_en_newton)

                        # visualisation des résultat finaux dans la console :

                        # print pour visualiser
                        print(force_de_gravitation_F_terre_vaisseau_en_newton)
                        print(force_de_gravitation_F_lune_vaisseau_en_newton)
                    else:
                        # ajout de 1000m à 'distance_entre_la_lune_et_le_vaisseau_en_m'
                        distance_entre_la_lune_et_le_vaisseau_en_m += 1
                        # soutrait de 1000m à 'distance_entre_la_terre_et_le_vaisseau_en_m'
                        distance_entre_la_terre_et_le_vaisseau_en_m -= 1
                        # remmettre les valeur des distance au carré
                        distance_entre_la_terre_et_le_vaisseau_en_m_au_carre = distance_entre_la_terre_et_le_vaisseau_en_m * distance_entre_la_terre_et_le_vaisseau_en_m
                        distance_entre_la_lune_et_le_vaisseau_en_m_au_carre = distance_entre_la_lune_et_le_vaisseau_en_m * distance_entre_la_lune_et_le_vaisseau_en_m
                        # mettre la 'force de gravitation F terre en newton' égal à la 'masse de la terre en kg' fois la 'masse totale du vaisseau en kg' diviser par la 'distance entre la terre et le vaisseau en m au carre'
                        force_de_gravitation_F_terre_vaisseau_en_newton = masse_de_la_terre_en_kg * masse_totale_du_vaisseau_en_kg / distance_entre_la_terre_et_le_vaisseau_en_m_au_carre
                        # multiplier la 'force de gravitation F terre en newton' par 'g'
                        force_de_gravitation_F_terre_vaisseau_en_newton *= g

                        # mettre la 'force de gravitation F lune en newton' égal à la 'masse de la lune en kg' fois la 'masse totale du vaisseau en kg' diviser par la 'distance entre la lune et le vaisseau en m au carre'
                        force_de_gravitation_F_lune_vaisseau_en_newton = masse_de_la_lune_en_kg * masse_totale_du_vaisseau_en_kg / distance_entre_la_lune_et_le_vaisseau_en_m_au_carre
                        # multiplier la 'force de gravitation F terre en newton' par 'g'
                        force_de_gravitation_F_lune_vaisseau_en_newton *= g

                        # visualisation des résultat finaux dans la console :

                        # print pour visualiser
                        print(force_de_gravitation_F_terre_vaisseau_en_newton)
                        print(force_de_gravitation_F_lune_vaisseau_en_newton)
    ui.calcul.clicked.connect(calcul)
    sys.exit(app.exec_())
